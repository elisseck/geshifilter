<?php

/**
 * @file
 * An input filter for syntax highlighting using the GeSHi library.
 */

define('GESHIFILTER_DEFAULT_PLAINTEXT', 'GESHIFILTER_DEFAULT_PLAINTEXT');
define('GESHIFILTER_DEFAULT_DONOTHING', 'GESHIFILTER_DEFAULT_DONOTHING');

// GeSHi CSS modes
// Inline CSS
define('GESHIFILTER_CSS_INLINE', 1);
// Usage of CSS classes and an automatically managaged external stylesheet
define('GESHIFILTER_CSS_CLASSES_AUTOMATIC', 2);
// Only add CSS classes to markup, admin/themer is responsible for defining the CSS rules
define('GESHIFILTER_CSS_CLASSES_ONLY', 3);

define('GESHIFILTER_ATTRIBUTES_LANGUAGE', 'type lang language class');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING', 'linenumbers');
define('GESHIFILTER_ATTRIBUTE_LINE_NUMBERING_START', 'start');
define('GESHIFILTER_ATTRIBUTE_FANCY_N', 'fancy');
define('GESHIFILTER_ATTRIBUTE_TITLE', 'title');

define('GESHIFILTER_BRACKETS_ANGLE', 1);
define('GESHIFILTER_BRACKETS_SQUARE', 2);
define('GESHIFILTER_BRACKETS_BOTH', 3); // Deprecated, only used in upgrade path.
define('GESHIFILTER_BRACKETS_DOUBLESQUARE', 4);
define('GESHIFILTER_BRACKETS_PHPBLOCK', 8);


define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NONE', 0);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_NORMAL', 1);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY5', 5);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY10', 10);
define('GESHIFILTER_LINE_NUMBERS_DEFAULT_FANCY20', 20);

/**
 * Implements hook_menu().
 */
function geshifilter_menu() {
  $items = array();
  $items['admin/config/content/formats/geshifilter'] = array(
    'title' => 'GeSHi Filter',
    'description' => 'Configure the GeSHi filter.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('geshifilter_admin_general_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/content/formats/geshifilter/general'] = array(
    'title' => 'General settings',
    'description' => 'General GeSHi filter settings.',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/content/formats/geshifilter/filterconflicts'] = array(
    'title' => 'Filter conflicts',
    'description' => 'Information on possible conflicts with other filters.',
    'file' => 'geshifilter.conflicts.inc',
    'page callback' => 'geshifilter_admin_filter_conflicts',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  // language settings
  $items['admin/config/content/formats/geshifilter/languages'] = array(
    'title' => 'Languages',
    'description' => 'Enable the desired languages and configure their settings.',
    'file' => 'geshifilter.admin.inc',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('geshifilter_admin_per_language_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/formats/geshifilter/languages/enabled'] = array(
    'title' => 'Enabled',
    'description' => 'Show the enabled languages',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/config/content/formats/geshifilter/languages/all'] = array(
    'title' => 'All',
    'description' => 'Show all the available languages',
    'page arguments' => array('geshifilter_admin_per_language_settings', 'all'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/content/formats/geshifilter/languages/disabled'] = array(
    'title' => 'Disabled',
    'description' => 'Show the disabled languages',
    'page arguments' => array('geshifilter_admin_per_language_settings', 'disabled'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 6,
  );
  // Callback for generating CSS rules.
  $items['admin/config/content/formats/geshifilter/generate_css'] = array(
    'page callback' => 'geshifilter_generate_language_css_rules',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_config_info().
 */
function geshifilter_config_info() {
  $prefixes['geshifilter.settings'] = array(
    'label' => t('GeSHi Filter settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_init().
 */
function geshifilter_init() {
  // Since the filtered content is cached, it is not possible to know on which
  // pages the css file is actually needed. Thus it is included on all pages.
  if (config_get('geshifilter.settings', 'geshifilter_css_mode') == GESHIFILTER_CSS_CLASSES_AUTOMATIC) {
    backdrop_add_css(_geshifilter_language_css_path());
  }
  backdrop_add_css(backdrop_get_path('module', 'geshifilter') . '/geshifilter.css');
}

/**
 * Filter-Tips callback.
 */
function geshifilter_filter_tips($delta, $format, $long = FALSE) {
  require_once __DIR__ . '/geshifilter.filtertips.inc';
  return _geshifilter_filter_tips($delta, $format, $long);
}

/**
 * Implements hook_filter_info().
 */
function geshifilter_filter_info() {
  $filters = array();
  $filters['geshifilter'] = array(
    'title' => t('GeSHi filter'),
    'description' => t('Enables syntax highlighting of inline/block source code using the GeSHi engine'),
    'prepare callback' => 'geshifilter_prepare_callback',
    'process callback' => 'geshifilter_process_callback',
    'tips callback' => 'geshifilter_filter_tips',
    'settings callback' => 'geshifilter_filter_settings_callback',
    'default settings' => array(
      'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd>',
      'filter_html_help' => 1,
      'filter_html_nofollow' => 0,
    ),
  );
  return $filters;
}

/**
 * Prepare callback for the GeSHi filter.
 */
function geshifilter_prepare_callback($text, $format, $filter) {
  require_once __DIR__ . '/geshifilter.pages.inc';
  return _geshifilter_prepare($format, $text, $filter);
}

/**
 * Process callback for the GeSHi filter.
 */
function geshifilter_process_callback($text, $format, $filter) {
  require_once __DIR__ . '/geshifilter.pages.inc';
  return _geshifilter_process($format, $text, $filter);
}

/**
 * Settings callback for the GeSHi filter.
 */
function geshifilter_filter_settings_callback($form, &$form_state, $filter, $format) {
  return _geshifilter_filter_settings($form, $form_state, $filter, $format);
}

/**
 * Implements hook_theme().
 */
function geshifilter_theme() {
  return array(
    'geshifilter_per_language_settings' => array(
      'render element' => 'form',
    )
  );
}

/**
 * Implements hook_requirements().
 */
function geshifilter_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    require_once __DIR__ . '/geshifilter.inc';
    if (!class_exists('GeSHi')) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library not found.'),
        'description' => t('Please <a href="!download">download</a> and place the GeSHi PHP library in the <code>/libraries</code> directory. See the <a href="!installation">installation instructions for more information</a>.', array(
          '!download' => 'https://sourceforge.net/projects/geshi/files/geshi/',
          '!installation' => 'https://github.com/backdrop-contrib/geshifilter#installation',
        )),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    elseif (($version = explode('.', GESHI_VERSION)) && !($version[0] == '1' && $version[1] == '0')) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('GeSHi library invalid version.'),
        'description' => t('The detected version of GeSHi library (%version) is not supported. A version from the 1.0.x branch is required.', array('%version' => GESHI_VERSION)),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Found GeSHi library version %version',
          array('%version' => GESHI_VERSION)), // GESHI_VERSION is defined in GeSHi library
        'severity' => REQUIREMENT_OK,
      );
    }

    // Warn if GeSHi filter is configured to automatically managed external stylesheet when it's not possible
    if (config_get('geshifilter.settings', 'geshifilter_css_mode') == GESHIFILTER_CSS_CLASSES_AUTOMATIC && !_geshifilter_managed_external_stylesheet_possible()) {
      $requirements[] = array(
        'title' => 'GeSHi filter CSS mode',
        'value' => t('GeSHi filter can not automatically manage an external style sheet when the download method is private.'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('Change the CSS mode of the <a href="!geshi">GeSHi filter</a> or change the <a href="!filesystem">download mode</a> to public.',
          array('!geshi' => url('admin/config/content/formats/geshifilter'), '!filesystem' => url('admin/config/content/file-system'))),
      );
    }

    // check for filter conflicts
    require_once __DIR__ . '/geshifilter.conflicts.inc';
    if (geshifilter_admin_filter_conflicts(TRUE) > 0) {
      $requirements[] = array(
        'title' => 'GeSHi filter',
        'value' => t('Some filter conflicts were detected.'),
        'description' => l(t('View and resolve the detected filter conflicts'), 'admin/config/content/formats/geshifilter/filterconflicts'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Helper function for checking if an automatically managed style sheet is possible.
 *
 * @return boolean indicating if an automatically managed style sheet is possible.
 */
function _geshifilter_managed_external_stylesheet_possible() {
  $directory = _geshifilter_language_css_path(TRUE);
  return file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
}

/**
 * Callback function for generating the CSS rules for the syntax highlighting.
 */
function geshifilter_generate_language_css_rules() {
  require_once __DIR__ . '/geshifilter.admin.inc';
  backdrop_add_http_header("Content-type", "text/css");
  $output = _geshifilter_generate_languages_css_rules();
  print($output);
  exit();
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function _geshifilter_language_css_path($dironly = FALSE) {
  $directory = file_default_scheme() . '://geshi';
  return $dironly ? $directory : $directory . '/geshifilter-languages.css';
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function geshifilter_filter_admin_form_submit($form, &$form_state) {
  if (isset($form_state['values']['filters']['geshifilter']['settings'])) {
    $values = $form_state['values']['filters']['geshifilter']['settings'];
    $f = $form_state['values']['format'];
    config_set('geshifilter.settings', "geshifilter_tags_{$f}", $values['general_tags']["tags_{$f}"]);
    config_set('geshifilter.settings', "geshifilter_tag_styles_{$f}", $values['general_tags']["tag_styles_{$f}"]);
    $languages = $values['per_language_settings']['table']['languages'];
    foreach ($languages as $key => $value) {
      config_set('geshifilter.settings', "geshifilter_language_tags_{$key}_{$f}", $value["language_tags_{$key}_{$f}"]);
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function geshifilter_form_filter_admin_format_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'geshifilter', 'geshifilter.admin');
  $form['#submit'][] = 'geshifilter_filter_admin_form_submit';
  $form['#validate'][] = 'geshifilter_per_filter_language_settings_validate';
}

/**
 * Implements hook_autoload_info().
 */
function geshifilter_autoload_info() {
  return [
    'GeSHi' => 'libraries/geshi/geshi.php'
  ];
}

